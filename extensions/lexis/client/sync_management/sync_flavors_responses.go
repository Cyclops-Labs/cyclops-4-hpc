// Code generated by go-swagger; DO NOT EDIT.

package sync_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Cyclops-Labs/cyclops-4-hpc.git/extensions/lexis/models"
)

// SyncFlavorsReader is a Reader for the SyncFlavors structure.
type SyncFlavorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncFlavorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncFlavorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewSyncFlavorsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSyncFlavorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSyncFlavorsOK creates a SyncFlavorsOK with default headers values
func NewSyncFlavorsOK() *SyncFlavorsOK {
	return &SyncFlavorsOK{}
}

/*SyncFlavorsOK handles this case with default header values.

The load of data was completely successfully
*/
type SyncFlavorsOK struct {
}

func (o *SyncFlavorsOK) Error() string {
	return fmt.Sprintf("[GET /sync/flavors][%d] syncFlavorsOK ", 200)
}

func (o *SyncFlavorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncFlavorsAccepted creates a SyncFlavorsAccepted with default headers values
func NewSyncFlavorsAccepted() *SyncFlavorsAccepted {
	return &SyncFlavorsAccepted{}
}

/*SyncFlavorsAccepted handles this case with default header values.

Operation done but there might have been some fails when adding part of the data
*/
type SyncFlavorsAccepted struct {
}

func (o *SyncFlavorsAccepted) Error() string {
	return fmt.Sprintf("[GET /sync/flavors][%d] syncFlavorsAccepted ", 202)
}

func (o *SyncFlavorsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncFlavorsInternalServerError creates a SyncFlavorsInternalServerError with default headers values
func NewSyncFlavorsInternalServerError() *SyncFlavorsInternalServerError {
	return &SyncFlavorsInternalServerError{}
}

/*SyncFlavorsInternalServerError handles this case with default header values.

Something unexpected happend, error raised
*/
type SyncFlavorsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SyncFlavorsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sync/flavors][%d] syncFlavorsInternalServerError  %+v", 500, o.Payload)
}

func (o *SyncFlavorsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SyncFlavorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
